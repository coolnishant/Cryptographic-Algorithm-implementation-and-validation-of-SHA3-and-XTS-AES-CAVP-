package sha3bit;

/*
**********Authors**********
        Nishant Raj
        Suraj Kumar
***************************
*/
import java.math.BigInteger;

/**
 * implementation of SHA-3 224 or 256 or 384 or 512 BIT oriented
 **/

/**
 * Edited: working for 224 also
 **/
public class SHA3BitOriented
   
{
    private static final long[] KeccakRoundConstants = new long[]{ 0x0000000000000001L, 0x0000000000008082L,
        0x800000000000808aL, 0x8000000080008000L, 0x000000000000808bL, 0x0000000080000001L, 0x8000000080008081L,
        0x8000000000008009L, 0x000000000000008aL, 0x0000000000000088L, 0x0000000080008009L, 0x000000008000000aL,
        0x000000008000808bL, 0x800000000000008bL, 0x8000000000008089L, 0x8000000000008003L, 0x8000000000008002L,
        0x8000000000000080L, 0x000000000000800aL, 0x800000008000000aL, 0x8000000080008081L, 0x8000000000008080L,
        0x0000000080000001L, 0x8000000080008008L };

    protected long[] state = new long[25];
    
    private void KeccakPermutation()
    {
        long[] A = state;

        long a00 = A[ 0], a01 = A[ 1], a02 = A[ 2], a03 = A[ 3], a04 = A[ 4];
        long a05 = A[ 5], a06 = A[ 6], a07 = A[ 7], a08 = A[ 8], a09 = A[ 9];
        long a10 = A[10], a11 = A[11], a12 = A[12], a13 = A[13], a14 = A[14];
        long a15 = A[15], a16 = A[16], a17 = A[17], a18 = A[18], a19 = A[19];
        long a20 = A[20], a21 = A[21], a22 = A[22], a23 = A[23], a24 = A[24];

        for (int i = 0; i < 24; i++)
        {
            // theta
            long c0 = a00 ^ a05 ^ a10 ^ a15 ^ a20;
            long c1 = a01 ^ a06 ^ a11 ^ a16 ^ a21;
            long c2 = a02 ^ a07 ^ a12 ^ a17 ^ a22;
            long c3 = a03 ^ a08 ^ a13 ^ a18 ^ a23;
            long c4 = a04 ^ a09 ^ a14 ^ a19 ^ a24;

            long d1 = (c1 << 1 | c1 >>> -1) ^ c4;
            long d2 = (c2 << 1 | c2 >>> -1) ^ c0;
            long d3 = (c3 << 1 | c3 >>> -1) ^ c1;
            long d4 = (c4 << 1 | c4 >>> -1) ^ c2;
            long d0 = (c0 << 1 | c0 >>> -1) ^ c3;

            a00 ^= d1; a05 ^= d1; a10 ^= d1; a15 ^= d1; a20 ^= d1;
            a01 ^= d2; a06 ^= d2; a11 ^= d2; a16 ^= d2; a21 ^= d2;
            a02 ^= d3; a07 ^= d3; a12 ^= d3; a17 ^= d3; a22 ^= d3;
            a03 ^= d4; a08 ^= d4; a13 ^= d4; a18 ^= d4; a23 ^= d4;
            a04 ^= d0; a09 ^= d0; a14 ^= d0; a19 ^= d0; a24 ^= d0;

            // rho/pi
            c1  = a01 <<  1 | a01 >>> 63;
            a01 = a06 << 44 | a06 >>> 20;
            a06 = a09 << 20 | a09 >>> 44;
            a09 = a22 << 61 | a22 >>>  3;
            a22 = a14 << 39 | a14 >>> 25;
            a14 = a20 << 18 | a20 >>> 46;
            a20 = a02 << 62 | a02 >>>  2;
            a02 = a12 << 43 | a12 >>> 21;
            a12 = a13 << 25 | a13 >>> 39;
            a13 = a19 <<  8 | a19 >>> 56;
            a19 = a23 << 56 | a23 >>>  8;
            a23 = a15 << 41 | a15 >>> 23;
            a15 = a04 << 27 | a04 >>> 37;
            a04 = a24 << 14 | a24 >>> 50;
            a24 = a21 <<  2 | a21 >>> 62;
            a21 = a08 << 55 | a08 >>>  9;
            a08 = a16 << 45 | a16 >>> 19;
            a16 = a05 << 36 | a05 >>> 28;
            a05 = a03 << 28 | a03 >>> 36;
            a03 = a18 << 21 | a18 >>> 43;
            a18 = a17 << 15 | a17 >>> 49;
            a17 = a11 << 10 | a11 >>> 54;
            a11 = a07 <<  6 | a07 >>> 58;
            a07 = a10 <<  3 | a10 >>> 61;
            a10 = c1;

            // chi
            c0 = a00 ^ (~a01 & a02);
            c1 = a01 ^ (~a02 & a03);
            a02 ^= ~a03 & a04;
            a03 ^= ~a04 & a00;
            a04 ^= ~a00 & a01;
            a00 = c0;
            a01 = c1;

            c0 = a05 ^ (~a06 & a07);
            c1 = a06 ^ (~a07 & a08);
            a07 ^= ~a08 & a09;
            a08 ^= ~a09 & a05;
            a09 ^= ~a05 & a06;
            a05 = c0;
            a06 = c1;

            c0 = a10 ^ (~a11 & a12);
            c1 = a11 ^ (~a12 & a13);
            a12 ^= ~a13 & a14;
            a13 ^= ~a14 & a10;
            a14 ^= ~a10 & a11;
            a10 = c0;
            a11 = c1;

            c0 = a15 ^ (~a16 & a17);
            c1 = a16 ^ (~a17 & a18);
            a17 ^= ~a18 & a19;
            a18 ^= ~a19 & a15;
            a19 ^= ~a15 & a16;
            a15 = c0;
            a16 = c1;

            c0 = a20 ^ (~a21 & a22);
            c1 = a21 ^ (~a22 & a23);
            a22 ^= ~a23 & a24;
            a23 ^= ~a24 & a20;
            a24 ^= ~a20 & a21;
            a20 = c0;
            a21 = c1;

            // iota
            a00 ^= KeccakRoundConstants[i];
        }
        
        A[ 0] = a00; A[ 1] = a01; A[ 2] = a02; A[ 3] = a03; A[ 4] = a04;
        A[ 5] = a05; A[ 6] = a06; A[ 7] = a07; A[ 8] = a08; A[ 9] = a09;
        A[10] = a10; A[11] = a11; A[12] = a12; A[13] = a13; A[14] = a14;
        A[15] = a15; A[16] = a16; A[17] = a17; A[18] = a18; A[19] = a19;
        A[20] = a20; A[21] = a21; A[22] = a22; A[23] = a23; A[24] = a24;
    }
    
    
    public static void main(String[] args) {
        
        //INPUT String in Hash
        String str = 
                "";
        //INPUT Size in bits
        int inputlength = 116452;
        
        //Specify Output Size Required
        int outputsize = 224;

        int capacity = 2*outputsize;
        int rate = 1600-capacity;
        
        //SHA Domain Parameter is 01
        String hashdomain = "01";

        System.out.println("String Input: "+str);
        System.out.println("Input Length: "+inputlength);
        System.out.println("Output Size: "+outputsize);
        System.out.println("Rate: "+rate);
        System.out.println("Capacity: "+capacity);
        System.out.println("Rate + Capacity = "+(rate+capacity));
        
        //For Hex INPUT
        String bin = hexToBinary2(str);
         
        String t2="";
        
        //Input reversed to eight bits and then concat in previous order (was not required in case of 1605bit dataset)
        for(int i=0; i<bin.length()/8;i++){
            t2 += new StringBuilder(bin.substring(i*8, (i+1)*8)).reverse().toString();
        }
        bin = t2;
        
        //bin now has value from 0 to inputlength
        bin = bin.substring(0,inputlength);

        //concat 01->sha Pad10*1
        String topass = bin+hashdomain+"1";
        int ltopass = topass.length();
        for(int i=0;i<rate-ltopass-1;i++){
            topass += "0";
        }
        if(ltopass >=rate)
            for(int h=0; h < rate -1 - ltopass % rate;h++){
                topass += "0";
            }
        topass+="1";
        SHA3BitOriented sha3bitorient = new SHA3BitOriented();
        int index = topass.length()/rate;
        int i=0;
    while(i<index){
        //Capacity Size zero's added
        String topass2 = topass.substring(i*rate,(i+1)*rate);
        for(int k=0;k<capacity;k++){
            topass2 += "0";
        }

        long topasss[] = new long[25];
        
        topass2 = binflipingll(topass2);
        for(int k=0; k<topass2.length()/64;k++){
            String temp = topass2.substring(k*64, (k+1)*64);
            t2 = "";
            for(int j=0; j<temp.length()/8;j++){
                t2 = temp.substring(j*8,(j+1)*8) + t2;
            }
            topasss[k] = parseLong(t2, 2);
        }
       
        //State Building
        for (int k = 0; k < 25; ++k){
            sha3bitorient.state[k] ^= topasss[k];
        }
        i++;
        sha3bitorient.KeccakPermutation();
    }
        long[] result = sha3bitorient.state; 
        System.out.print("\nHash SHA-"+outputsize+": ");
        String zeros = "000000000000000000000000000000000000000000000000000000000000000000000000000000";
        for(i=0; i<outputsize/64;i++){
            String temp = Long.toBinaryString(result[i]);
            if(temp.length() < 64)
                temp = zeros.substring(0,64-temp.length()) + temp;
            t2 = "";
            for(int j=0; j<temp.length()/8;j++){
                t2 = temp.substring(j*8,(j+1)*8) + t2;
            }


        BigInteger b = new BigInteger(t2, 2);
            temp = b.toString(16);
            if(temp.length() < 16)
                temp = zeros.substring(0,16-temp.length()) + temp;
            System.out.print(temp);
        }
        if(outputsize%64 >0){
            String temp = Long.toBinaryString(result[i]);
            if(temp.length() < 64)
                temp = zeros.substring(0,64-temp.length()) + temp;
            t2 = "";
            for(int j=0; j<temp.length()/8;j++){
                t2 = temp.substring(j*8,(j+1)*8) + t2;
            }
            
            BigInteger b = new BigInteger(t2, 2);
            temp = b.toString(16);
            if(temp.length() < 16)
                temp = zeros.substring(0,16-temp.length()) + temp;
            System.out.print(temp.substring(0, (outputsize%64)/4));
        }
        
        System.out.println("");
    }
    
    
     public static String getSHA3Hash(MyMessage mm) {
        
        //INPUT String
        String str = mm.Msg;
        int inputlength = mm.inputlength;
        
        int outputsize = mm.outputlength;
        int capacity = 2*outputsize;
        int rate = 1600-capacity;
        String output="";
        
        String hashdomain = "01";
        
        //For Hex INPUT
        String bin = hexToBinary2(str);
         
        String t2="";
        
        //Input reversed to eight bits and then concat in previous order (was not required in case of 1605bit dataset)
        for(int i=0; i<bin.length()/8;i++){
            t2 += new StringBuilder(bin.substring(i*8, (i+1)*8)).reverse().toString();
        }
        bin = t2;
        
        //bin now has value from 0 to inputlength
        bin = bin.substring(0,inputlength);

        //concat 01->sha Pad10*1
        String topass = bin+hashdomain+"1";
        int ltopass = topass.length();
        for(int i=0;i<rate-ltopass-1;i++){
            topass += "0";
        }
        if(ltopass >=rate)
            for(int h=0; h < rate -1 - ltopass % rate;h++){
                topass += "0";
            }
        topass+="1";
        SHA3BitOriented mkd = new SHA3BitOriented();
        int index = topass.length()/rate;
        int i=0;
    while(i<index){
        //Capacity 512 zero's added

        String topass2 = topass.substring(i*rate,(i+1)*rate);
        for(int k=0;k<capacity;k++){
            topass2 += "0";
        }

        long topasss[] = new long[25];
        
        topass2 = binflipingll(topass2);
        for(int k=0; k<topass2.length()/64;k++){
            String temp = topass2.substring(k*64, (k+1)*64);
            t2 = "";
            for(int j=0; j<temp.length()/8;j++){
                t2 = temp.substring(j*8,(j+1)*8) + t2;
            }
            topasss[k] = parseLong(t2, 2);
        }
       
        //state building
        for (int k = 0; k < 25; ++k){
            mkd.state[k] ^= topasss[k];
        }
        i++;
        mkd.KeccakPermutation();
    }
        long[] result = mkd.state; 
        String zeros = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        for(i=0; i<outputsize/64;i++){
            String temp = Long.toBinaryString(result[i]);
            if(temp.length() < 64)
                temp = zeros.substring(0,64-temp.length()) + temp;
            t2 = "";
            for(int j=0; j<temp.length()/8;j++){
                t2 = temp.substring(j*8,(j+1)*8) + t2;
            }
            
            BigInteger b = new BigInteger(t2, 2);
            temp = b.toString(16);
            if(temp.length() < 16)
                temp = zeros.substring(0,16-temp.length()) + temp;
            output += temp;
        }
        if(outputsize%64 >0){
            String temp = Long.toBinaryString(result[i]);
            if(temp.length() < 64)
                temp = zeros.substring(0,64-temp.length()) + temp;
            t2 = "";
            for(int j=0; j<temp.length()/8;j++){
                t2 = temp.substring(j*8,(j+1)*8) + t2;
            }
            
            BigInteger b = new BigInteger(t2, 2);
            temp = b.toString(16);
            if(temp.length() < 16)
                temp = zeros.substring(0,16-temp.length()) + temp;
            output += (temp.substring(0, (outputsize%64)/4));
        }
        return output;
    }


    public static String binflipingll(String bin) {
        int l=bin.length()/8;
        String res ="";
        for (int i = 0; i < l; i++) {
            res += new StringBuilder(bin.substring(i*8, (i+1)*8)).reverse().toString();
        }
        return res;
    }
    
    public static String hexToBinary(char hex) {
        String bin = "";
        switch(hex){
            case '0':
                bin = "0000";
                break;
            case '1':
                bin = "0001";
                break;
            case '2':
                bin = "0010";
                break;
            case '3':
                bin = "0011";
                break;
            case '4':
                bin = "0100";
                break;
            case '5':
                bin = "0101";
                break;
            case '6':
                bin = "0110";
                break;
            case '7':
                bin = "0111";
                break;
            case '8':
                bin = "1000";
                break;
            case '9':
                bin = "1001";
                break;
            case 'a':
            case 'A':
                bin = "1010";
                break;
            case 'b':
            case 'B':
                bin = "1011";
                break;
            case 'c':
            case 'C':
                bin = "1100";
                break;
            case 'd':
            case 'D':
                bin = "1101";
                break;
            case 'e':
            case 'E':
                bin = "1110";
                break;
            case 'f':
            case 'F':
                bin = "1111";
                break;
        }
        return bin;
    }
    
    public static String hexToBinary2(String hex) {
        String bin = "";
        for(int i=0;i<hex.length();i++)
            bin += hexToBinary(hex.charAt(i));
        return bin;
    }
 
    private static long parseLong(String s, int base) {
        return new BigInteger(s, base).longValue();
    } 
}